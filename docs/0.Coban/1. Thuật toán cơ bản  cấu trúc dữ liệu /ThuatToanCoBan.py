# ICPC Python - C·∫•u tr√∫c d·ªØ li·ªáu v√† Thu·∫≠t to√°n n√¢ng cao
# Bao g·ªìm: DS n√¢ng cao + Thu·∫≠t to√°n c∆° b·∫£n + Thu·∫≠t to√°n t·ªïng h·ª£p

import sys
import heapq
from collections import deque

# ==================== STACK / QUEUE / DEQUE ====================
# Stack: c·∫•u tr√∫c LIFO (Last In First Out)
stack = []
stack.append(1)
stack.append(2)
stack.pop()

# Queue: c·∫•u tr√∫c FIFO (First In First Out)
queue = deque()
queue.append(1)
queue.append(2)
queue.popleft()

# Deque: h√†ng ƒë·ª£i hai ƒë·∫ßu
# appendleft, popleft cho ƒë·∫ßu; append, pop cho cu·ªëi

# ==================== PRIORITY QUEUE (HEAP) ====================
# Heap: d√πng heapq (heap min)
heap = []
heapq.heappush(heap, 2)
heapq.heappush(heap, 1)
heapq.heappop(heap)

# ==================== UNION-FIND / DSU ====================
# T√¨m ƒë·∫°i di·ªán c·ªßa t·∫≠p h·ª£p v√† g·ªôp t·∫≠p
class DSU:
    def __init__(self, n):
        self.parent = list(range(n))

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        xr = self.find(x)
        yr = self.find(y)
        if xr != yr:
            self.parent[yr] = xr

# ==================== TRIE ====================
# D√πng ƒë·ªÉ l∆∞u t·ª´, t√¨m ki·∫øm prefix nhanh
class TrieNode:
    def __init__(self):
        self.children = {}
        self.end = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for ch in word:
            if ch not in node.children:
                node.children[ch] = TrieNode()
            node = node.children[ch]
        node.end = True

    def search(self, word):
        node = self.root
        for ch in word:
            if ch not in node.children:
                return False
            node = node.children[ch]
        return node.end

# ==================== FENWICK TREE (BIT) ====================
# D√πng cho b√†i to√°n c·ªông ƒëo·∫°n, c·∫≠p nh·∫≠t 1 ƒëi·ªÉm
class FenwickTree:
    def __init__(self, size):
        self.n = size
        self.tree = [0] * (size + 1)

    def update(self, i, delta):
        while i <= self.n:
            self.tree[i] += delta
            i += (i & -i)

    def query(self, i):
        res = 0
        while i > 0:
            res += self.tree[i]
            i -= (i & -i)
        return res

# ==================== T√åM KI·∫æM ====================
# Tuy·∫øn t√≠nh - O(n)
def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

# Nh·ªã ph√¢n - O(log n)
def binary_search(arr, target):
    l, r = 0, len(arr) - 1
    while l <= r:
        mid = (l + r) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            l = mid + 1
        else:
            r = mid - 1
    return -1

# ==================== S·∫ÆP X·∫æP ====================
# QuickSort - chia ƒë·ªÉ tr·ªã, trung b√¨nh O(n log n), t·ªá nh·∫•t O(n^2)
def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    left = [x for x in arr[1:] if x <= pivot]
    right = [x for x in arr[1:] if x > pivot]
    return quicksort(left) + [pivot] + quicksort(right)

# MergeSort - chia ƒë·ªÉ tr·ªã, ·ªïn ƒë·ªãnh, lu√¥n O(n log n)
def mergesort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = mergesort(arr[:mid])
    right = mergesort(arr[mid:])
    res = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            res.append(left[i])
            i += 1
        else:
            res.append(right[j])
            j += 1
    res += left[i:] + right[j:]
    return res

# ==================== HEAPSORT ====================
# ‚úîÔ∏è M·ª•c ƒë√≠ch: S·∫Øp x·∫øp m·∫£ng s·ª≠ d·ª•ng heap (min-heap)
# ‚úîÔ∏è Th·ªùi gian: O(n log n)
# ‚ùå Kh√¥ng ·ªïn ƒë·ªãnh (kh√¥ng gi·ªØ th·ª© t·ª± c·ªßa ph·∫ßn t·ª≠ b·∫±ng nhau)
# üìå D·ªÖ d√πng nh·ªù th∆∞ vi·ªán heapq trong Python
import heapq

def heapsort(arr):
    heapq.heapify(arr)  # Chuy·ªÉn m·∫£ng th√†nh min-heap
    return [heapq.heappop(arr) for _ in range(len(arr))]  # L·∫•y l·∫ßn l∆∞·ª£t ph·∫ßn t·ª≠ nh·ªè nh·∫•t


# ==================== QUY HO·∫†CH ƒê·ªòNG (DYNAMIC PROGRAMMING - DP) ====================
# ‚úîÔ∏è M·ª•c ƒë√≠ch: T·ªëi ∆∞u h√†m ƒë·ªá quy b·∫±ng c√°ch nh·ªõ k·∫øt qu·∫£ ƒë√£ t√≠nh
# ‚úîÔ∏è ·ª®ng d·ª•ng: T√≠nh Fibonacci nhanh, tr√°nh ƒë·ªá quy ch·ªìng l·∫∑p
# üìå memo l√† m·ªôt t·ª´ ƒëi·ªÉn l∆∞u k·∫øt qu·∫£ trung gian
# üìå C·∫ßn reset memo khi d√πng l·∫°i ƒë·ªÉ tr√°nh l·ªói

memo = {}  # L∆∞u gi√° tr·ªã ƒë√£ t√≠nh

def fib(n):
    if n <= 1:
        return n
    if n in memo:
        return memo[n]
    memo[n] = fib(n - 1) + fib(n - 2)
    return memo[n]


# ==================== THU·∫¨T TO√ÅN THAM LAM (GREEDY) ====================
# ‚úîÔ∏è M·ª•c ƒë√≠ch: ƒê·ªïi ti·ªÅn v·ªõi s·ªë l∆∞·ª£ng xu √≠t nh·∫•t
# ‚úîÔ∏è Ti·ªÅn ƒë·ªÅ: Lu√¥n ch·ªçn ƒë·ªìng xu l·ªõn nh·∫•t (ƒë√£ s·∫Øp x·∫øp gi·∫£m d·∫ßn)
# ‚ùó Ch·ªâ ƒë√∫ng n·∫øu h·ªá th·ªëng ti·ªÅn l√† chu·∫©n (v√≠ d·ª•: VNƒê ho·∫∑c USD)
# ‚ùå Kh√¥ng √°p d·ª•ng ƒë∆∞·ª£c v·ªõi h·ªá phi chu·∫©n (vd: coin = [1, 3, 4])
# üìå ƒê√¢y l√† v√≠ d·ª• kinh ƒëi·ªÉn minh h·ªça cho Greedy

def greedy_coin_change(coins, amount):
    coins.sort(reverse=True)  # S·∫Øp x·∫øp coin t·ª´ l·ªõn ‚Üí nh·ªè
    res = 0
    for coin in coins:
        while amount >= coin:
            amount -= coin
            res += 1
    return res  # Tr·∫£ v·ªÅ t·ªïng s·ªë coin d√πng


# ==================== BACKTRACKING ====================
# ‚úîÔ∏è M·ª•c ƒë√≠ch: T√¨m t·∫•t c·∫£ c√°c ho√°n v·ªã (permutation) c·ªßa 1 danh s√°ch
# ‚úîÔ∏è √ù t∆∞·ªüng: Duy·ªát m·ªçi t·ªï h·ª£p c√≥ th·ªÉ b·∫±ng c√°ch th·ª≠ - sai - th·ª≠ l·∫°i (backtrack)
# üìå path l√† k·∫øt qu·∫£ t·∫°m th·ªùi, options l√† c√°c ph·∫ßn t·ª≠ c√≤n l·∫°i
# üìå M·ªói l·∫ßn ch·ªçn 1 ph·∫ßn t·ª≠ ‚Üí g·ªçi ƒë·ªá quy v·ªõi ph·∫ßn c√≤n l·∫°i
# ‚ùó H√†m n√†y t·∫°o ra t·∫•t c·∫£ ho√°n v·ªã (n!), d√πng cho n nh·ªè (n ‚â§ 8)

res = []  # K·∫øt qu·∫£ l∆∞u ·ªü ƒë√¢y

def backtrack(path, options):
    if not options:  # Khi kh√¥ng c√≤n g√¨ ƒë·ªÉ ch·ªçn ‚Üí th√™m path v√†o k·∫øt qu·∫£
        res.append(path)
        return
    for i in range(len(options)):
        backtrack(path + [options[i]], options[:i] + options[i+1:])  # Ch·ªçn options[i], lo·∫°i kh·ªèi danh s√°ch


# ==================== BIT MANIPULATION ====================
x = 10  # 1010
bit1 = x & (1 << 1)  # ki·ªÉm tra bit th·ª© 1
x_on = x | (1 << 2)  # b·∫≠t bit th·ª© 2
x_off = x & ~(1 << 1) # t·∫Øt bit th·ª© 1

# ==================== THU·∫¨T TO√ÅN T·ªîNG H·ª¢P ====================
# S√†ng Eratosthenes - t√¨m t·∫•t c·∫£ s·ªë nguy√™n t·ªë <= n
def sieve(n):
    is_prime = [True] * (n+1)
    is_prime[0] = is_prime[1] = False
    for i in range(2, int(n**0.5)+1):
        if is_prime[i]:
            for j in range(i*i, n+1, i):
                is_prime[j] = False
    return [i for i, val in enumerate(is_prime) if val]

# ∆Ø·ªõc chung l·ªõn nh·∫•t (GCD)
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# B·ªôi chung nh·ªè nh·∫•t (LCM)
def lcm(a, b):
    return a * b // gcd(a, b)

# T·ªïng chu·ªói ch∆∞a s·∫Øp x·∫øp
unsorted_arr = [3, 1, 5, 2]
print("T·ªïng ch∆∞a s·∫Øp x·∫øp:", sum(unsorted_arr))

# T·ªïng chu·ªói ƒë√£ s·∫Øp x·∫øp
sorted_arr = sorted(unsorted_arr)
print("T·ªïng ƒë√£ s·∫Øp x·∫øp:", sum(sorted_arr))

print("\n‚úÖ ƒê√£ chu·∫©n b·ªã ƒë·∫ßy ƒë·ªß DS n√¢ng cao, thu·∫≠t to√°n t√¨m ki·∫øm, s·∫Øp x·∫øp, DP, greedy, backtracking, bit, GCD/LCM, sieve, t·ªïng d√£y...")
