# üéí B√†i to√°n Balo 0/1 (0/1 Knapsack)
# ----------------------------------------
# ‚úÖ M√¥ t·∫£:
# Cho n v·∫≠t, m·ªói v·∫≠t c√≥ tr·ªçng l∆∞·ª£ng w[i] v√† gi√° tr·ªã v[i]
# Ch·ªçn m·ªôt t·∫≠p kh√¥ng v∆∞·ª£t qu√° tr·ªçng l∆∞·ª£ng W sao cho t·ªïng gi√° tr·ªã l√† l·ªõn nh·∫•t

# ‚úÖ Quy ho·∫°ch ƒë·ªông:
# dp[i][j] = max gi√° tr·ªã v·ªõi i v·∫≠t ƒë·∫ßu ti√™n, t·ªïng kh·ªëi l∆∞·ª£ng ‚â§ j

# ‚úÖ ƒê·ªô ph·ª©c t·∫°p: O(nW)

# ----------------------------------------

def knapsack_01(n, W, w, v):
    dp = [[0] * (W + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(W + 1):
            if j >= w[i-1]:
                dp[i][j] = max(dp[i-1][j], dp[i-1][j - w[i-1]] + v[i-1])
            else:
                dp[i][j] = dp[i-1][j]
    return dp[n][W]

# üìå V√≠ d·ª•:
n = 4
W = 8
w = [3, 4, 5, 2]  # tr·ªçng l∆∞·ª£ng
v = [2, 3, 4, 3]  # gi√° tr·ªã
print("T·ªëi ƒëa h√≥a gi√° tr·ªã:", knapsack_01(n, W, w, v))

# üß† Ghi ch√∫:
# - V·ªõi m·ªói v·∫≠t, c√≥ 2 l·ª±a ch·ªçn: ch·ªçn ho·∫∑c kh√¥ng
# - N·∫øu ch·ªçn: ph·∫£i ƒë·∫£m b·∫£o ƒë·ªß tr·ªçng l∆∞·ª£ng
# - N·∫øu kh√¥ng ch·ªçn: gi·ªØ nguy√™n gi√° tr·ªã t·ªëi ∆∞u c≈©
# - ƒê√¢y l√† m·ªôt trong c√°c d·∫°ng DP quan tr·ªçng nh·∫•t
# - C√≥ th·ªÉ t·ªëi ∆∞u xu·ªëng 1D: dp[j] = max(dp[j], dp[j - w[i]] + v[i]) t·ª´ j=W v·ªÅ 0
