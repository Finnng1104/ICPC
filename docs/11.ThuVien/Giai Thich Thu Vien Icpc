# üìö GI·∫¢I TH√çCH CHI TI·∫æT TH∆Ø VI·ªÜN ICPC C·∫¶N D√ôNG
# Bao g·ªìm: numpy, opencv-python, pillow, torch, torchvision
# D√†nh cho √¥n thi ICPC c√≥ b√†i to√°n x·ª≠ l√Ω ·∫£nh, AI, ma tr·∫≠n

# ========== NUMPY ==========
# X·ª≠ l√Ω m·∫£ng s·ªë h·ªçc nhanh, h·ªó tr·ª£ to√°n h·ªçc n·ªÅn t·∫£ng
import numpy as np

arr = np.array([1, 2, 3, 4])  # t·∫°o m·∫£ng numpy
print("M·∫£ng g·ªëc:", arr)
print("C·ªông to√†n b·ªô +1:", arr + 1)  # broadcast +1 cho to√†n b·ªô
print("T·ªïng:", np.sum(arr))        # t√≠nh t·ªïng

# ========== PILLOW (PIL) ==========
# ƒê·ªçc v√† x·ª≠ l√Ω ·∫£nh ƒë∆°n gi·∫£n (Pillow l√† phi√™n b·∫£n n√¢ng c·∫•p PIL)
from PIL import Image

img = Image.new('RGB', (100, 100), color='red')  # t·∫°o ·∫£nh 100x100 m√†u ƒë·ªè
img.save("sample.png")  # l∆∞u ·∫£nh
print("üì∏ ƒê√£ t·∫°o ·∫£nh sample.png")

# ========== OPENCV (cv2) ==========
# X·ª≠ l√Ω ·∫£nh n√¢ng cao: ƒë·ªçc, l·ªçc, ng∆∞·ª°ng, contour, nh·∫≠n di·ªán
import cv2

img_cv = cv2.imread("sample.png")               # ƒë·ªçc ·∫£nh b·∫±ng OpenCV
gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY) # chuy·ªÉn sang grayscale
_, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)  # ng∆∞·ª°ng h√≥a ·∫£nh
cv2.imwrite("gray_thresh.png", thresh)          # l∆∞u l·∫°i ·∫£nh ng∆∞·ª°ng
print("üß™ ƒê√£ x·ª≠ l√Ω ·∫£nh: gray_thresh.png")

# ========== TORCH (PyTorch) ==========
# Th∆∞ vi·ªán h·ªçc s√¢u AI, l√†m vi·ªác v·ªõi tensor
import torch

x = torch.tensor([1.0, 2.0, 3.0])     # t·∫°o tensor
print("Tensor ban ƒë·∫ßu:", x)
print("B√¨nh ph∆∞∆°ng t·ª´ng ph·∫ßn t·ª≠:", x ** 2)

# ========== TORCHVISION ==========
# H·ªó tr·ª£ x·ª≠ l√Ω ·∫£nh trong h·ªçc s√¢u: m√¥ h√¨nh, transform
import torchvision.transforms as transforms
from torchvision import models

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor()
])

# T·∫£i m√¥ h√¨nh ResNet18 pretrained
model = models.resnet18(pretrained=True)
model.eval()

print("‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh h·ªçc s√¢u ResNet18 ƒë·ªÉ d√πng offline")

# ========== T·ªîNG K·∫æT ==========
print("\n‚úÖ T√≥m t·∫Øt:")
print("- numpy:	X·ª≠ l√Ω m·∫£ng s·ªë h·ªçc nhanh")
print("- pillow:	X·ª≠ l√Ω ·∫£nh ƒë∆°n gi·∫£n, m·ªü/l∆∞u ·∫£nh")
print("- opencv:	X·ª≠ l√Ω ·∫£nh n√¢ng cao, AI/vision")
print("- torch:	Th∆∞ vi·ªán h·ªçc s√¢u m·∫°nh m·∫Ω")
print("- torchvision:	Model, bi·∫øn ƒë·ªïi ·∫£nh cho h·ªçc s√¢u")
