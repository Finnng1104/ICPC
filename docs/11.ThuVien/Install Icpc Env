# install_icpc_env.py
# üì¶ T·ª± ƒë·ªông ho√° t·∫°o m√¥i tr∆∞·ªùng ICPC v√† c√†i th∆∞ vi·ªán c·∫ßn thi·∫øt
# ===============================================
"""
Script c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng ICPC t·ª± ƒë·ªông:
1. T·∫°o v√† qu·∫£n l√Ω virtual environment
2. C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
3. Ki·ªÉm tra m√¥i tr∆∞·ªùng
4. T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c chu·∫©n

H·ªó tr·ª£:
- macOS / Linux
- Python 3.8+
- C√†i ƒë·∫∑t offline (t·∫£i s·∫µn wheel files)
"""

import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path

# ========== C·∫§U H√åNH ==========
REQUIRED_PYTHON = (3, 8)  # Python 3.8+
REQUIRED_PACKAGES = {
    'numpy': '1.21.0',
    'opencv-python': '4.5.0',
    'pillow': '8.0.0',
    'torch': '1.9.0',
    'torchvision': '0.10.0'
}

# C·∫•u tr√∫c th∆∞ m·ª•c chu·∫©n ICPC
ICPC_DIRS = [
    'docs',
    'docs/0.Coban',
    'docs/1.ThamKhao',
    'docs/2.ThuVien',
    'docs/3.BaiTap',
    'docs/4.GiaiThuat',
    'docs/5.Cay',
    'docs/6.LyThuyetDoThi',
    'docs/7.DynamicProgramming',
    'docs/8.Geometry',
    'docs/9.String',
    'docs/10.Probability',
    'docs/11.ThuVien',
    'docs/12.ImageProcessing',
    'docs/13.AI',
    'docs/14.GameTheory',
    'docs/15.Advanced',
    'data',
    'data/images',
    'data/models',
    'data/datasets',
    'src',
    'src/utils',
    'src/algorithms',
    'src/visualization',
    'tests',
    'notebooks'
]

# ========== KI·ªÇM TRA M√îI TR∆Ø·ªúNG ==========
def check_python_version():
    """Ki·ªÉm tra phi√™n b·∫£n Python"""
    current = sys.version_info[:2]
    if current < REQUIRED_PYTHON:
        print(f"‚ùå Python {REQUIRED_PYTHON[0]}.{REQUIRED_PYTHON[1]}+ required")
        print(f"   Current version: {current[0]}.{current[1]}")
        sys.exit(1)
    print(f"‚úÖ Python version: {current[0]}.{current[1]}")

def check_system():
    """Ki·ªÉm tra h·ªá ƒëi·ªÅu h√†nh"""
    system = platform.system().lower()
    if system not in ['darwin', 'linux']:
        print(f"‚ùå Unsupported system: {system}")
        print("   This script only supports macOS and Linux")
        sys.exit(1)
    print(f"‚úÖ System: {system}")

def check_dependencies():
    """Ki·ªÉm tra c√°c c√¥ng c·ª• c·∫ßn thi·∫øt"""
    required = ['python3', 'pip', 'git']
    missing = []
    
    for cmd in required:
        try:
            subprocess.run([cmd, '--version'], 
                         stdout=subprocess.PIPE, 
                         stderr=subprocess.PIPE)
        except FileNotFoundError:
            missing.append(cmd)
    
    if missing:
        print("‚ùå Missing required tools:", ', '.join(missing))
        sys.exit(1)
    print("‚úÖ All required tools are installed")

# ========== T·∫†O M√îI TR∆Ø·ªúNG ==========
def create_virtual_env():
    """T·∫°o virtual environment n·∫øu ch∆∞a t·ªìn t·∫°i"""
    venv_path = Path("icpc-env")
    
    if venv_path.exists():
        print("‚úÖ Virtual environment 'icpc-env' already exists")
        return
    
    print("üß± Creating virtual environment 'icpc-env'...")
    try:
        subprocess.run([sys.executable, "-m", "venv", "icpc-env"],
                      check=True)
        print("‚úÖ Virtual environment created successfully")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to create virtual environment: {e}")
        sys.exit(1)

def create_directory_structure():
    """T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c chu·∫©n ICPC"""
    print("\nüìÅ Creating ICPC directory structure...")
    
    for dir_path in ICPC_DIRS:
        path = Path(dir_path)
        if not path.exists():
            path.mkdir(parents=True, exist_ok=True)
            print(f"  Created: {dir_path}")
    
    # T·∫°o README.md trong m·ªói th∆∞ m·ª•c
    for dir_path in ICPC_DIRS:
        readme_path = Path(dir_path) / "README.md"
        if not readme_path.exists():
            with open(readme_path, "w") as f:
                f.write(f"# {dir_path}\n\n")
                f.write("## Description\n")
                f.write("This directory contains...\n\n")
                f.write("## Contents\n")
                f.write("- [ ] Add content description\n")

# ========== C√ÄI ƒê·∫∂T TH∆Ø VI·ªÜN ==========
def create_requirements_file():
    """T·∫°o file requirements.txt"""
    print("\nüìù Creating requirements.txt...")
    
    with open("requirements.txt", "w") as f:
        f.write("# ICPC Environment Requirements\n")
        f.write("# Generated automatically\n\n")
        for package, version in REQUIRED_PACKAGES.items():
            f.write(f"{package}>={version}\n")
    
    print("‚úÖ Created requirements.txt")

def download_wheel_files():
    """T·∫£i s·∫µn wheel files cho c√†i ƒë·∫∑t offline"""
    print("\nüì¶ Downloading wheel files for offline installation...")
    
    wheels_dir = Path("wheels")
    wheels_dir.mkdir(exist_ok=True)
    
    # T·∫£i wheel files
    for package, version in REQUIRED_PACKAGES.items():
        wheel_file = f"{package}-{version}-*.whl"
        if not list(wheels_dir.glob(wheel_file)):
            print(f"  Downloading {package}...")
            try:
                subprocess.run([
                    "pip", "download",
                    "--only-binary=:all:",
                    "--platform", "manylinux2014_x86_64",
                    "--python-version", "38",
                    "--dest", "wheels",
                    f"{package}>={version}"
                ], check=True)
            except subprocess.CalledProcessError as e:
                print(f"  ‚ùå Failed to download {package}: {e}")
                continue
    
    print("‚úÖ Wheel files downloaded to 'wheels' directory")

# ========== KI·ªÇM TRA SAU C√ÄI ƒê·∫∂T ==========
def create_test_script():
    """T·∫°o script ki·ªÉm tra m√¥i tr∆∞·ªùng"""
    print("\nüß™ Creating environment test script...")
    
    test_code = '''# test_icpc_env.py
import sys
import platform
import subprocess
from pathlib import Path

def check_imports():
    """Ki·ªÉm tra import c√°c th∆∞ vi·ªán"""
    packages = {
        'numpy': 'NumPy',
        'cv2': 'OpenCV',
        'PIL': 'Pillow',
        'torch': 'PyTorch',
        'torchvision': 'TorchVision'
    }
    
    print("\\nüîç Checking package imports...")
    all_ok = True
    
    for module, name in packages.items():
        try:
            __import__(module)
            print(f"‚úÖ {name} imported successfully")
        except ImportError as e:
            print(f"‚ùå Failed to import {name}: {e}")
            all_ok = False
    
    return all_ok

def check_versions():
    """Ki·ªÉm tra phi√™n b·∫£n c√°c th∆∞ vi·ªán"""
    import numpy as np
    import cv2
    from PIL import Image
    import torch
    import torchvision
    
    print("\\nüìä Package versions:")
    print(f"Python: {sys.version.split()[0]}")
    print(f"NumPy: {np.__version__}")
    print(f"OpenCV: {cv2.__version__}")
    print(f"Pillow: {Image.__version__}")
    print(f"PyTorch: {torch.__version__}")
    print(f"TorchVision: {torchvision.__version__}")

def check_gpu():
    """Ki·ªÉm tra GPU support"""
    import torch
    
    print("\\nüéÆ GPU Support:")
    if torch.cuda.is_available():
        print(f"‚úÖ CUDA available: {torch.cuda.get_device_name(0)}")
        print(f"   CUDA version: {torch.version.cuda}")
    else:
        print("‚ÑπÔ∏è CUDA not available, using CPU")

def check_directories():
    """Ki·ªÉm tra c·∫•u tr√∫c th∆∞ m·ª•c"""
    required_dirs = [
        'docs', 'data', 'src', 'tests', 'notebooks',
        'data/images', 'data/models', 'data/datasets'
    ]
    
    print("\\nüìÅ Checking directory structure...")
    all_ok = True
    
    for dir_path in required_dirs:
        path = Path(dir_path)
        if path.exists() and path.is_dir():
            print(f"‚úÖ {dir_path} exists")
        else:
            print(f"‚ùå {dir_path} missing")
            all_ok = False
    
    return all_ok

if __name__ == "__main__":
    print("üöÄ Testing ICPC Environment...")
    
    # Ki·ªÉm tra h·ªá th·ªëng
    print(f"\\nüíª System: {platform.system()} {platform.release()}")
    print(f"Python: {sys.version.split()[0]}")
    
    # Ch·∫°y c√°c ki·ªÉm tra
    imports_ok = check_imports()
    check_versions()
    check_gpu()
    dirs_ok = check_directories()
    
    # K·∫øt lu·∫≠n
    print("\\nüìä Test Summary:")
    print(f"Package imports: {'‚úÖ OK' if imports_ok else '‚ùå Failed'}")
    print(f"Directory structure: {'‚úÖ OK' if dirs_ok else '‚ùå Failed'}")
    
    if imports_ok and dirs_ok:
        print("\\nüéâ ICPC environment is ready!")
    else:
        print("\\n‚ö†Ô∏è Some tests failed. Please check the output above.")
'''
    
    with open("test_icpc_env.py", "w") as f:
        f.write(test_code)
    
    print("‚úÖ Created test_icpc_env.py")

# ========== MAIN ==========
def main():
    """H√†m ch√≠nh"""
    print("\nüöÄ Starting ICPC Environment Setup...")
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    check_python_version()
    check_system()
    check_dependencies()
    
    # T·∫°o m√¥i tr∆∞·ªùng
    create_virtual_env()
    create_directory_structure()
    create_requirements_file()
    download_wheel_files()
    create_test_script()
    
    # H∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng
    print("\nüìå Next steps:")
    print("1. Activate the virtual environment:")
    print("   source icpc-env/bin/activate")
    print("\n2. Install packages (online):")
    print("   pip install -r requirements.txt")
    print("\n   Or install offline (if you downloaded wheels):")
    print("   pip install --no-index --find-links=wheels -r requirements.txt")
    print("\n3. Test the environment:")
    print("   python test_icpc_env.py")
    
    print("\nüéØ ICPC environment setup completed!")
    print("üí° Check test_icpc_env.py for detailed environment information")

if __name__ == "__main__":
    main()
