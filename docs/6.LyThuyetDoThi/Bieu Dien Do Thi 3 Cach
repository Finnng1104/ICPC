# 📘 3 CÁCH BIỂU DIỄN ĐỒ THỊ TRONG LẬP TRÌNH THI ĐẤU
# --------------------------------------------------
# Với đồ thị có N đỉnh (từ 0 đến N-1), M cạnh.
# Giả sử cạnh có trọng số (có thể = 1 nếu không trọng số)

N = 4
edges = [
    (0, 1, 2),  # cạnh từ 0 → 1 trọng số 2
    (0, 2, 4),
    (1, 2, 1),
    (1, 3, 7),
    (2, 3, 3)
]

# ===================================================
# 1️⃣ DANH SÁCH KỀ (Adjacency List)
# Tốt cho duyệt BFS/DFS, đồ thị thưa
adj_list = [[] for _ in range(N)]
for u, v, w in edges:
    adj_list[u].append((v, w))  # Nếu vô hướng: thêm cả (v → u)

print("\n📋 Danh sách kề:")
for u in range(N):
    print(f"{u} → {adj_list[u]}")

# ===================================================
# 2️⃣ MA TRẬN KỀ (Adjacency Matrix)
# Tốt cho kiểm tra tồn tại cạnh, đồ thị nhỏ
adj_matrix = [[0]*N for _ in range(N)]
for u, v, w in edges:
    adj_matrix[u][v] = w

print("\n🧮 Ma trận kề:")
for row in adj_matrix:
    print(row)

# ===================================================
# 3️⃣ DANH SÁCH CẠNH (Edge List)
# Tốt cho Kruskal, Bellman-Ford
edge_list = list(edges)  # đơn giản là giữ nguyên danh sách cạnh

print("\n📎 Danh sách cạnh:")
for u, v, w in edge_list:
    print(f"{u} → {v} (trọng số {w})")

# ===================================================
# 🧠 GỢI Ý DÙNG
# - Adjacency List: BFS, DFS, Dijkstra
# - Adjacency Matrix: Floyd-Warshall, bài nhỏ
# - Edge List: Kruskal, Bellman-Ford

# ========= BÀI TOÁN ICPC MINH HỌA =========

# ========= BÀI 1: ĐƯỜNG ĐI NGẮN NHẤT (DANH SÁCH KỀ) =========
"""
❓ Đề bài: Cho đồ thị có hướng N đỉnh, M cạnh. Mỗi cạnh có trọng số dương.
Tìm đường đi ngắn nhất từ đỉnh 0 đến đỉnh N-1.

🔍 INPUT:
- Dòng 1: N M
- M dòng tiếp: u v w

🔎 OUTPUT:
- Khoảng cách ngắn nhất từ 0 đến N-1
- Đường đi (nếu có)

💡 Phân tích:
- Đồ thị có hướng + trọng số dương → Dijkstra
- N ≤ 10^5 → dùng danh sách kề để tiết kiệm bộ nhớ
- Cần lưu đường đi → thêm mảng parent[]
"""

def solve_shortest_path():
    # Nhập dữ liệu
    n, m = map(int, input().split())
    adj = [[] for _ in range(n)]
    for _ in range(m):
        u, v, w = map(int, input().split())
        adj[u].append((v, w))
    
    # Dijkstra với danh sách kề
    import heapq
    INF = int(1e9)
    dist = [INF]*n
    parent = [-1]*n
    dist[0] = 0
    pq = [(0, 0)]
    
    while pq:
        d, u = heapq.heappop(pq)
        if d > dist[u]: continue
        for v, w in adj[u]:
            if dist[v] > dist[u] + w:
                dist[v] = dist[u] + w
                parent[v] = u
                heapq.heappush(pq, (dist[v], v))
    
    # In kết quả
    if dist[n-1] == INF:
        print(-1)  # Không có đường đi
    else:
        print(dist[n-1])
        # In đường đi
        path = []
        v = n-1
        while v != -1:
            path.append(v)
            v = parent[v]
        print("->".join(map(str, reversed(path))))

# ========= BÀI 2: CHU TRÌNH HAMILTON (MA TRẬN KỀ) =========
"""
❓ Đề bài: Cho đồ thị vô hướng N đỉnh. Kiểm tra xem có tồn tại
chu trình Hamilton (đi qua mỗi đỉnh đúng 1 lần) không?

🔍 INPUT:
- Dòng 1: N
- N dòng tiếp: ma trận kề (1 nếu có cạnh, 0 nếu không)

🔎 OUTPUT:
- YES nếu có chu trình Hamilton
- NO nếu không có

💡 Phân tích:
- N ≤ 20 → dùng ma trận kề để kiểm tra cạnh nhanh
- Quay lui + nhánh cận để tìm chu trình
- Lưu trạng thái đã thăm bằng bitmask
"""

def solve_hamilton_cycle():
    # Nhập dữ liệu
    n = int(input())
    adj = [list(map(int, input().split())) for _ in range(n)]
    
    # Quay lui tìm chu trình
    def backtrack(pos, visited, count):
        if count == n:
            # Kiểm tra có cạnh về đỉnh 0 không
            return adj[pos][0] == 1
        
        for next_pos in range(n):
            if not (visited & (1 << next_pos)) and adj[pos][next_pos]:
                if backtrack(next_pos, visited | (1 << next_pos), count + 1):
                    return True
        return False
    
    # Bắt đầu từ đỉnh 0
    visited = 1  # bitmask: đỉnh 0 đã thăm
    print("YES" if backtrack(0, visited, 1) else "NO")

# ========= BÀI 3: CÂY KHUNG NHỎ NHẤT (DANH SÁCH CẠNH) =========
"""
❓ Đề bài: Cho đồ thị vô hướng N đỉnh, M cạnh. Mỗi cạnh có trọng số.
Tìm cây khung nhỏ nhất với điều kiện: có đúng K cạnh màu đỏ.

🔍 INPUT:
- Dòng 1: N M K
- M dòng tiếp: u v w c (c=1 nếu cạnh đỏ, c=0 nếu cạnh xanh)

🔎 OUTPUT:
- Tổng trọng số cây khung nhỏ nhất thỏa mãn
- -1 nếu không tồn tại

💡 Phân tích:
- Cần sắp xếp cạnh → dùng danh sách cạnh
- Kruskal với điều kiện số cạnh đỏ
- DSU để kiểm tra chu trình
"""

def solve_mst_with_constraint():
    # Nhập dữ liệu
    n, m, k = map(int, input().split())
    edges = []
    for _ in range(m):
        u, v, w, c = map(int, input().split())
        edges.append((w, c, u-1, v-1))
    
    # Sắp xếp cạnh theo trọng số
    edges.sort()
    
    # DSU
    class DSU:
        def __init__(self, n):
            self.parent = list(range(n))
            self.rank = [0]*n
        
        def find(self, x):
            if self.parent[x] != x:
                self.parent[x] = self.find(self.parent[x])
            return self.parent[x]
        
        def union(self, x, y):
            px, py = self.find(x), self.find(y)
            if px == py: return False
            if self.rank[px] < self.rank[py]:
                px, py = py, px
            self.parent[py] = px
            if self.rank[px] == self.rank[py]:
                self.rank[px] += 1
            return True
    
    # Thử tất cả số cạnh đỏ có thể
    def try_mst(target_red):
        dsu = DSU(n)
        total = 0
        red_count = 0
        
        # Ưu tiên cạnh đỏ nếu cần thêm
        if target_red > 0:
            for w, c, u, v in edges:
                if c == 1 and dsu.union(u, v):
                    total += w
                    red_count += 1
                    if red_count == target_red:
                        break
        
        # Thêm các cạnh còn lại
        for w, c, u, v in edges:
            if dsu.union(u, v):
                total += w
                if c == 1:
                    red_count += 1
        
        # Kiểm tra điều kiện
        if red_count == k and all(dsu.find(0) == dsu.find(i) for i in range(n)):
            return total
        return float('inf')
    
    # Tìm kết quả tốt nhất
    result = min(try_mst(r) for r in range(k+1))
    print(result if result != float('inf') else -1)

# ========= DEMO =========
if __name__ == "__main__":
    print("\n=== Demo các bài toán ICPC ===")
    
    print("\n1. Đường đi ngắn nhất (Dijkstra):")
    test_input = """5 6
0 1 2
0 2 4
1 2 1
1 3 7
2 3 3
3 4 1"""
    import sys
    from io import StringIO
    sys.stdin = StringIO(test_input)
    solve_shortest_path()
    
    print("\n2. Chu trình Hamilton:")
    test_input = """4
0 1 1 1
1 0 1 1
1 1 0 1
1 1 1 0"""
    sys.stdin = StringIO(test_input)
    solve_hamilton_cycle()
    
    print("\n3. MST với ràng buộc:")
    test_input = """4 5 2
1 2 2 1
1 3 3 0
2 3 1 1
2 4 4 0
3 4 5 1"""
    sys.stdin = StringIO(test_input)
    solve_mst_with_constraint()
    
    print("\n✅ Đã demo 3 bài toán ICPC với các cách biểu diễn đồ thị khác nhau.")
    print("💡 Mỗi cách biểu diễn phù hợp với một loại bài toán cụ thể!")
