# üìù B√†i 9: Truy v·∫•n ƒëo·∫°n con
# ===============================================
"""
ƒê·ªÅ b√†i: Cho m·ªôt d√£y s·ªë A c√≥ N ph·∫ßn t·ª≠. C√≥ Q truy v·∫•n, m·ªói truy v·∫•n thu·ªôc m·ªôt trong hai lo·∫°i:
1. C·∫≠p nh·∫≠t: Thay ƒë·ªïi gi√° tr·ªã A[i] th√†nh x
2. Truy v·∫•n: T√¨m t·ªïng, gi√° tr·ªã l·ªõn nh·∫•t v√† nh·ªè nh·∫•t trong ƒëo·∫°n [l, r]

Input:
- D√≤ng 1: N v√† Q (1 ‚â§ N,Q ‚â§ 10^5)
- D√≤ng 2: N s·ªë nguy√™n A[i] (-10^9 ‚â§ A[i] ‚â§ 10^9)
- Q d√≤ng ti·∫øp: M·ªói d√≤ng l√† m·ªôt truy v·∫•n:
  + "1 i x": C·∫≠p nh·∫≠t A[i] = x
  + "2 l r": Truy v·∫•n ƒëo·∫°n [l, r]

Output:
- V·ªõi m·ªói truy v·∫•n lo·∫°i 2, in ra t·ªïng, max v√† min c·ªßa ƒëo·∫°n [l, r]

V√≠ d·ª•:
Input:
5 3
1 2 3 4 5
2 1 3
1 2 6
2 1 3

Output:
6 3 1
10 6 1
"""

class SegmentTree:
    def __init__(self, arr):
        self.n = len(arr)
        self.size = 1
        while self.size < self.n:
            self.size *= 2
        
        # Kh·ªüi t·∫°o c√°c m·∫£ng
        self.sum = [0] * (2 * self.size)
        self.max = [-float('inf')] * (2 * self.size)
        self.min = [float('inf')] * (2 * self.size)
        
        # ƒêi·ªÅn gi√° tr·ªã ban ƒë·∫ßu
        for i in range(self.n):
            self.sum[self.size + i] = arr[i]
            self.max[self.size + i] = arr[i]
            self.min[self.size + i] = arr[i]
        
        # X√¢y d·ª±ng c√¢y
        for i in range(self.size - 1, 0, -1):
            self.sum[i] = self.sum[2*i] + self.sum[2*i+1]
            self.max[i] = max(self.max[2*i], self.max[2*i+1])
            self.min[i] = min(self.min[2*i], self.min[2*i+1])
    
    def update(self, pos, value):
        pos += self.size
        self.sum[pos] = value
        self.max[pos] = value
        self.min[pos] = value
        
        while pos > 1:
            pos //= 2
            self.sum[pos] = self.sum[2*pos] + self.sum[2*pos+1]
            self.max[pos] = max(self.max[2*pos], self.max[2*pos+1])
            self.min[pos] = min(self.min[2*pos], self.min[2*pos+1])
    
    def query(self, l, r):
        l += self.size
        r += self.size
        res_sum = 0
        res_max = -float('inf')
        res_min = float('inf')
        
        while l <= r:
            if l % 2 == 1:
                res_sum += self.sum[l]
                res_max = max(res_max, self.max[l])
                res_min = min(res_min, self.min[l])
                l += 1
            if r % 2 == 0:
                res_sum += self.sum[r]
                res_max = max(res_max, self.max[r])
                res_min = min(res_min, self.min[r])
                r -= 1
            l //= 2
            r //= 2
        
        return res_sum, res_max, res_min

def solve():
    # ƒê·ªçc input
    n, q = map(int, input().split())
    arr = list(map(int, input().split()))
    
    # Kh·ªüi t·∫°o Segment Tree
    st = SegmentTree(arr)
    
    # X·ª≠ l√Ω c√°c truy v·∫•n
    for _ in range(q):
        query = list(map(int, input().split()))
        
        if query[0] == 1:
            # C·∫≠p nh·∫≠t
            i, x = query[1]-1, query[2]  # Chuy·ªÉn v·ªÅ 0-indexed
            st.update(i, x)
        else:
            # Truy v·∫•n
            l, r = query[1]-1, query[2]-1  # Chuy·ªÉn v·ªÅ 0-indexed
            sum_val, max_val, min_val = st.query(l, r)
            print(sum_val, max_val, min_val)
    
    # Ph·∫ßn m·ªü r·ªông: In tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa c√¢y
    print("\nTr·∫°ng th√°i hi·ªán t·∫°i c·ªßa d√£y s·ªë:")
    print("V·ªã tr√≠:", end=" ")
    for i in range(n):
        print(f"{i+1:4d}", end=" ")
    print("\nGi√° tr·ªã:", end=" ")
    for i in range(n):
        print(f"{arr[i]:4d}", end=" ")
    print()
    
    # In th·ªëng k√™
    print("\nTh·ªëng k√™:")
    total_sum, total_max, total_min = st.query(0, n-1)
    print(f"T·ªïng t·∫•t c·∫£: {total_sum}")
    print(f"Gi√° tr·ªã l·ªõn nh·∫•t: {total_max}")
    print(f"Gi√° tr·ªã nh·ªè nh·∫•t: {total_min}")
    print(f"Gi√° tr·ªã trung b√¨nh: {total_sum/n:.2f}")

if __name__ == "__main__":
    solve() 