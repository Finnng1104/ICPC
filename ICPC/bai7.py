# üìù B√†i 7: C√¢y khung nh·ªè nh·∫•t v·ªõi r√†ng bu·ªôc
# ===============================================
"""
ƒê·ªÅ b√†i: Cho ƒë·ªì th·ªã v√¥ h∆∞·ªõng c√≥ tr·ªçng s·ªë v·ªõi N ƒë·ªânh v√† M c·∫°nh.
T√¨m c√¢y khung nh·ªè nh·∫•t sao cho t·ªïng tr·ªçng s·ªë c√°c c·∫°nh kh√¥ng v∆∞·ª£t qu√° K
v√† s·ªë c·∫°nh c·ªßa c√¢y khung l√† l·ªõn nh·∫•t c√≥ th·ªÉ.

Input:
- D√≤ng 1: N, M v√† K (1 ‚â§ N ‚â§ 10^5, 1 ‚â§ M ‚â§ 2*10^5, 1 ‚â§ K ‚â§ 10^9)
- M d√≤ng ti·∫øp: M·ªói d√≤ng g·ªìm u, v, w th·ªÉ hi·ªán c·∫°nh n·ªëi u-v c√≥ tr·ªçng s·ªë w

Output:
- D√≤ng 1: S·ªë c·∫°nh trong c√¢y khung t√¨m ƒë∆∞·ª£c
- D√≤ng 2: T·ªïng tr·ªçng s·ªë c·ªßa c√¢y khung
- D√≤ng 3: C√°c c·∫°nh trong c√¢y khung (theo th·ª© t·ª± tƒÉng d·∫ßn c·ªßa tr·ªçng s·ªë)

V√≠ d·ª•:
Input:
4 5 10
1 2 3
1 3 4
2 3 2
2 4 5
3 4 1

Output:
3
6
2 3 1
3 4 1
1 2 3
"""

class DSU:
    def __init__(self, n):
        self.parent = list(range(n+1))
        self.rank = [0]*(n+1)
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, x, y):
        px, py = self.find(x), self.find(y)
        if px == py:
            return False
        
        if self.rank[px] < self.rank[py]:
            px, py = py, px
        
        self.parent[py] = px
        if self.rank[px] == self.rank[py]:
            self.rank[px] += 1
        return True

def solve():
    # ƒê·ªçc input
    n, m, k = map(int, input().split())
    edges = []
    
    for _ in range(m):
        u, v, w = map(int, input().split())
        edges.append((w, u, v))
    
    # S·∫Øp x·∫øp c·∫°nh theo tr·ªçng s·ªë
    edges.sort()
    
    # Kh·ªüi t·∫°o DSU
    dsu = DSU(n)
    
    # T√¨m c√¢y khung
    mst_edges = []
    total_weight = 0
    edge_count = 0
    
    for w, u, v in edges:
        if dsu.union(u, v):
            if total_weight + w <= k:
                mst_edges.append((u, v, w))
                total_weight += w
                edge_count += 1
            else:
                break
    
    # In k·∫øt qu·∫£
    print(edge_count)
    print(total_weight)
    
    # In c√°c c·∫°nh theo th·ª© t·ª± tƒÉng d·∫ßn c·ªßa tr·ªçng s·ªë
    for u, v, w in sorted(mst_edges, key=lambda x: x[2]):
        print(u, v, w)
    
    # Ph·∫ßn m·ªü r·ªông: In th√¥ng tin chi ti·∫øt v·ªÅ c√¢y khung
    print("\nTh√¥ng tin chi ti·∫øt v·ªÅ c√¢y khung:")
    print(f"S·ªë ƒë·ªânh: {n}")
    print(f"S·ªë c·∫°nh: {edge_count}")
    print(f"T·ªïng tr·ªçng s·ªë: {total_weight}")
    print(f"Tr·ªçng s·ªë trung b√¨nh: {total_weight/edge_count:.2f}")
    
    # Ki·ªÉm tra t√≠nh li√™n th√¥ng
    components = set(dsu.find(i) for i in range(1, n+1))
    print(f"S·ªë th√†nh ph·∫ßn li√™n th√¥ng: {len(components)}")
    
    if len(components) == 1:
        print("ƒê·ªì th·ªã li√™n th√¥ng")
    else:
        print("ƒê·ªì th·ªã kh√¥ng li√™n th√¥ng")
        print("C√°c th√†nh ph·∫ßn li√™n th√¥ng:")
        for comp in components:
            vertices = [i for i in range(1, n+1) if dsu.find(i) == comp]
            print(f"Th√†nh ph·∫ßn {comp}: {vertices}")

if __name__ == "__main__":
    solve() 